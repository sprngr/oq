crystal_doc_search_index_callback({"repository_name":"github.com/Blacksmoke16/oq","body":"# oq\n\n[![Built with Crystal](https://img.shields.io/badge/built%20with-crystal-000000.svg?style=flat-square)](https://crystal-lang.org/)\n[![Build Status](https://travis-ci.org/Blacksmoke16/oq.svg?branch=master)](https://travis-ci.org/Blacksmoke16/oq)\n[![Latest release](https://img.shields.io/github/release/Blacksmoke16/oq.svg?style=flat-square)](https://github.com/Blacksmoke16/oq/releases)\n[![oq](https://snapcraft.io/oq/badge.svg)](https://snapcraft.io/oq)\n\nA performant, portable `jq` wrapper thats facilitates the consumption and output of formats other than JSON; using `jq` filters to transform the data.\n\n* Compiles to a single binary for easy portability.\n* Performant, similar performance with JSON data compared to `jq`.  Slightly longer execution time when going to/from a non JSON format.  \n\n## Installation\n\n### Linux distrobutions supporting `snap` packages:\n\n```bash\nsnap install oq\n```\n\n### MacOS: (Soon)\n\n```bash\nbrew install oq\n```\n\n### From Source:\n\nRequires Crystal to be installed, see the [installation documentation](https://crystal-lang.org/reference/installation/).\n\n```bash\ngit clone https://github.com/Blacksmoke16/oq.git\ncd oq/\nshards build --production\n```\n\nThe built binary will be available as `./bin/oq`.  Can copy/move it elsewhere.\n\n\n## Usage\n\nUse the `oq` binary, with a few custom arguments.  All other arguments get passed to `jq`.\n\n```bash\nUsage: oq [--help] [oq-arguments] [jq-arguments] jq_filter [file [files...]]\n    --help                          Show this help message.\n    -i FORMAT, --input FORMAT       Format of the input data. Supported formats: json, yaml.\n    -o FORMAT, --output FORMAT      Format of the output data. Supported formats: json, yaml, xml.\n    --xml-root ROOT                 Name of the root XML element if converting to XML.\n```\n\n## Roadmap\n\nPlans for `1.0.0`:\n\n* XML input format\n* Address bugs/issues that arise\n* Small feature requests\n* Possibly additional formats\n\n## Contributing\n\n1. Fork it (<https://github.com/Blacksmoke16/oq/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Blacksmoke16](https://github.com/Blacksmoke16) Blacksmoke16 - creator, maintainer\n","program":{"html_id":"github.com/Blacksmoke16/oq/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/Blacksmoke16/oq","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/Blacksmoke16/oq/Array","path":"Array.html","kind":"class","full_name":"Array(T)","name":"Array","abstract":false,"superclass":{"html_id":"github.com/Blacksmoke16/oq/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/Blacksmoke16/oq/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/Blacksmoke16/oq/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"github.com/Blacksmoke16/oq/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/Blacksmoke16/oq/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"github.com/Blacksmoke16/oq/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/Blacksmoke16/oq/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"to_xml.cr","line_number":25,"url":"https://github.com/Blacksmoke16/oq/blob/5d7d283407e23e4be8054238a123ed6ceffa6a38/src/to_xml.cr"}],"repository_name":"github.com/Blacksmoke16/oq","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/Blacksmoke16/oq/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/Blacksmoke16/oq/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"An `Array` is an ordered, integer-indexed collection of objects of type T.\n\nArray indexing starts at 0. A negative index is assumed to be\nrelative to the end of the array: -1 indicates the last element,\n-2 is the next to last element, and so on.\n\nAn `Array` can be created using the usual `new` method (several are provided), or with an array literal:\n\n```\nArray(Int32).new  # => []\n[1, 2, 3]         # Array(Int32)\n[1, \"hello\", 'x'] # Array(Int32 | String | Char)\n```\n\nAn `Array` can have mixed types, meaning T will be a union of types, but these are determined\nwhen the array is created, either by specifying T or by using an array literal. In the latter\ncase, T will be set to the union of the array literal elements' types.\n\nWhen creating an empty array you must always specify T:\n\n```\n[] of Int32 # same as Array(Int32)\n[]          # syntax error\n```\n\nAn `Array` is implemented using an internal buffer of some capacity\nand is reallocated when elements are pushed to it when more capacity\nis needed. This is normally known as a [dynamic array](http://en.wikipedia.org/wiki/Dynamic_array).\n\nYou can use a special array literal syntax with other types too, as long as they define an argless\n`new` method and a `<<` method. `Set` is one such type:\n\n```\nset = Set{1, 2, 3} # => Set{1, 2, 3}\nset.class          # => Set(Int32)\n```\n\nThe above is the same as this:\n\n```\nset = Set(typeof(1, 2, 3)).new\nset << 1\nset << 2\nset << 3\n```","summary":"<p>An <code><a href=\"Array.html\">Array</a></code> is an ordered, integer-indexed collection of objects of type T.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"to_xml(builder:XML::Builder,key:String?=nil):Nil-instance-method","html_id":"to_xml(builder:XML::Builder,key:String?=nil):Nil-instance-method","name":"to_xml","doc":null,"summary":null,"abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"XML::Builder"},{"name":"key","doc":null,"default_value":"nil","external_name":"key","restriction":"String | ::Nil"}],"args_string":"(builder : XML::Builder, key : String? = <span class=\"n\">nil</span>) : Nil","source_link":"https://github.com/Blacksmoke16/oq/blob/5d7d283407e23e4be8054238a123ed6ceffa6a38/src/to_xml.cr#L26","def":{"name":"to_xml","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"XML::Builder"},{"name":"key","doc":null,"default_value":"nil","external_name":"key","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"each do |v|\n  builder.element(key || \"item\") do\n    v.to_xml(builder)\n  end\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/Blacksmoke16/oq/Hash","path":"Hash.html","kind":"class","full_name":"Hash(K, V)","name":"Hash","abstract":false,"superclass":{"html_id":"github.com/Blacksmoke16/oq/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/Blacksmoke16/oq/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"github.com/Blacksmoke16/oq/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/Blacksmoke16/oq/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/Blacksmoke16/oq/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"to_xml.cr","line_number":35,"url":"https://github.com/Blacksmoke16/oq/blob/5d7d283407e23e4be8054238a123ed6ceffa6a38/src/to_xml.cr"}],"repository_name":"github.com/Blacksmoke16/oq","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/Blacksmoke16/oq/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/Blacksmoke16/oq/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A `Hash` represents a collection of key-value mappings, similar to a dictionary.\n\nMain operations are storing a key-value mapping (`#[]=`) and\nquerying the value associated to a key (`#[]`). Key-value mappings can also be\ndeleted (`#delete`).\nKeys are unique within a hash. When adding a key-value mapping with a key that\nis already in use, the old value will be forgotten.\n\n```\n# Create a new Hash for mapping String to Int32\nhash = Hash(String, Int32).new\nhash[\"one\"] = 1\nhash[\"two\"] = 2\nhash[\"one\"] # => 1\n```\n\n[Hash literals](http://crystal-lang.org/reference/syntax_and_semantics/literals/hash.html)\ncan also be used to create a `Hash`:\n\n```\n{\"one\" => 1, \"two\" => 2}\n```\n\nImplementation is based on an open hash table.\nTwo objects refer to the same hash key when their hash value (`Object#hash`)\nis identical and both objects are equal to each other (`Object#==`).\n\nEnumeration follows the order that the corresponding keys were inserted.\n\nNOTE: When using mutable data types as keys, changing the value of a key after\nit was inserted into the `Hash` may lead to undefined behaviour. This can be\nrestored by re-indexing the hash with `#rehash`.","summary":"<p>A <code><a href=\"Hash.html\">Hash</a></code> represents a collection of key-value mappings, similar to a dictionary.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"to_xml(builder:XML::Builder):Nil-instance-method","html_id":"to_xml(builder:XML::Builder):Nil-instance-method","name":"to_xml","doc":null,"summary":null,"abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"XML::Builder"}],"args_string":"(builder : XML::Builder) : Nil","source_link":"https://github.com/Blacksmoke16/oq/blob/5d7d283407e23e4be8054238a123ed6ceffa6a38/src/to_xml.cr#L36","def":{"name":"to_xml","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"XML::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"each do |key, value|\n  key = ((  key.is_a?(JSON::Any) || key.is_a?(YAML::Any)) ? key.as_s : key)\n  case key\n  when .starts_with?('@')\n    builder.attribute(key.lchop('@'), value)\n    next\n  when \"#text\"\n    value.to_xml(builder)\n    next\n  end\n  if value.is_a?(Array)\n    value.to_xml(builder, key)\n  else\n    if (value.is_a?(JSON::Any) || value.is_a?(YAML::Any)) && (v = value.as_a?)\n      v.to_xml(builder, key)\n    else\n      builder.element(key) do\n        value.to_xml(builder)\n      end\n    end\n  end\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/Blacksmoke16/oq/NamedTuple","path":"NamedTuple.html","kind":"struct","full_name":"NamedTuple(**T)","name":"NamedTuple","abstract":false,"superclass":{"html_id":"github.com/Blacksmoke16/oq/Value","kind":"struct","full_name":"Value","name":"Value"},"ancestors":[{"html_id":"github.com/Blacksmoke16/oq/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/Blacksmoke16/oq/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"to_xml.cr","line_number":83,"url":"https://github.com/Blacksmoke16/oq/blob/5d7d283407e23e4be8054238a123ed6ceffa6a38/src/to_xml.cr"}],"repository_name":"github.com/Blacksmoke16/oq","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A named tuple is a fixed-size, immutable, stack-allocated mapping\nof a fixed set of keys to values.\n\nYou can think of a `NamedTuple` as an immutable `Hash` whose keys (which\nare of type `Symbol`), and the types for each key, are known at compile time.\n\nA named tuple can be created with a named tuple literal:\n\n```\nlanguage = {name: \"Crystal\", year: 2011} # NamedTuple(name: String, year: Int32)\n\nlanguage[:name]  # => \"Crystal\"\nlanguage[:year]  # => 2011\nlanguage[:other] # compile time error\n```\n\nThe compiler knows what types are in each key, so when indexing a named tuple\nwith a symbol literal the compiler will return the value for that key and\nwith the expected type, like in the above snippet. Indexing with a symbol\nliteral for which there's no key will give a compile-time error.\n\nIndexing with a symbol that is only known at runtime will return\na value whose type is the union of all the types in the named tuple,\nand might raise `KeyError`.","summary":"<p>A named tuple is a fixed-size, immutable, stack-allocated mapping of a fixed set of keys to values.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"to_xml(builder:XML::Builder):Nil-instance-method","html_id":"to_xml(builder:XML::Builder):Nil-instance-method","name":"to_xml","doc":null,"summary":null,"abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"XML::Builder"}],"args_string":"(builder : XML::Builder) : Nil","source_link":"https://github.com/Blacksmoke16/oq/blob/5d7d283407e23e4be8054238a123ed6ceffa6a38/src/to_xml.cr#L84","def":{"name":"to_xml","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"XML::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"to_h.transform_keys(&.to_s).to_xml(builder)"}}],"macros":[],"types":[]},{"html_id":"github.com/Blacksmoke16/oq/Object","path":"Object.html","kind":"class","full_name":"Object","name":"Object","abstract":true,"superclass":null,"ancestors":[],"locations":[{"filename":"to_xml.cr","line_number":5,"url":"https://github.com/Blacksmoke16/oq/blob/5d7d283407e23e4be8054238a123ed6ceffa6a38/src/to_xml.cr"}],"repository_name":"github.com/Blacksmoke16/oq","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"`Object` is the base type of all Crystal objects.","summary":"<p><code><a href=\"Object.html\">Object</a></code> is the base type of all Crystal objects.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"to_xml(builder:XML::Builder):Nil-instance-method","html_id":"to_xml(builder:XML::Builder):Nil-instance-method","name":"to_xml","doc":null,"summary":null,"abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"XML::Builder"}],"args_string":"(builder : XML::Builder) : Nil","source_link":"https://github.com/Blacksmoke16/oq/blob/5d7d283407e23e4be8054238a123ed6ceffa6a38/src/to_xml.cr#L20","def":{"name":"to_xml","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"XML::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"builder.text(self.to_s)"}},{"id":"to_xml(io:IO,*,root:String?,indent:String):Nil-instance-method","html_id":"to_xml(io:IO,*,root:String?,indent:String):Nil-instance-method","name":"to_xml","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"root","doc":null,"default_value":"","external_name":"root","restriction":"String | ::Nil"},{"name":"indent","doc":null,"default_value":"","external_name":"indent","restriction":"String"}],"args_string":"(io : IO, *, root : String?, indent : String) : Nil","source_link":"https://github.com/Blacksmoke16/oq/blob/5d7d283407e23e4be8054238a123ed6ceffa6a38/src/to_xml.cr#L12","def":{"name":"to_xml","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"root","doc":null,"default_value":"","external_name":"root","restriction":"String | ::Nil"},{"name":"indent","doc":null,"default_value":"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"XML.build(io, indent: indent, encoding: \"utf-8\") do |builder|\n  builder.element(root) do\n    to_xml(builder)\n  end\nend"}},{"id":"to_xml(*,root:String=&quot;root&quot;,indent:String=&quot;&quot;):String-instance-method","html_id":"to_xml(*,root:String=&amp;quot;root&amp;quot;,indent:String=&amp;quot;&amp;quot;):String-instance-method","name":"to_xml","doc":null,"summary":null,"abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"root","doc":null,"default_value":"\"root\"","external_name":"root","restriction":"String"},{"name":"indent","doc":null,"default_value":"\"  \"","external_name":"indent","restriction":"String"}],"args_string":"(*, root : String = <span class=\"s\">&quot;root&quot;</span>, indent : String = <span class=\"s\">&quot;  &quot;</span>) : String","source_link":"https://github.com/Blacksmoke16/oq/blob/5d7d283407e23e4be8054238a123ed6ceffa6a38/src/to_xml.cr#L6","def":{"name":"to_xml","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"root","doc":null,"default_value":"\"root\"","external_name":"root","restriction":"String"},{"name":"indent","doc":null,"default_value":"\"  \"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.build do |str|\n  to_xml(str, root: root, indent: indent)\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/Blacksmoke16/oq/Oq","path":"Oq.html","kind":"module","full_name":"Oq","name":"Oq","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"oq.cr","line_number":7,"url":"https://github.com/Blacksmoke16/oq/blob/5d7d283407e23e4be8054238a123ed6ceffa6a38/src/oq.cr"},{"filename":"oq_cli.cr","line_number":5,"url":"https://github.com/Blacksmoke16/oq/blob/5d7d283407e23e4be8054238a123ed6ceffa6a38/src/oq_cli.cr"}],"repository_name":"github.com/Blacksmoke16/oq","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A performant and portable jq wrapper to support formats other than JSON.","summary":"<p>A performant and portable jq wrapper to support formats other than JSON.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/Blacksmoke16/oq/Oq/Format","path":"Oq/Format.html","kind":"enum","full_name":"Oq::Format","name":"Format","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/Blacksmoke16/oq/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/Blacksmoke16/oq/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/Blacksmoke16/oq/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/Blacksmoke16/oq/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"oq.cr","line_number":9,"url":"https://github.com/Blacksmoke16/oq/blob/5d7d283407e23e4be8054238a123ed6ceffa6a38/src/oq.cr"}],"repository_name":"github.com/Blacksmoke16/oq","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Json","name":"Json","value":"0","doc":null,"summary":null},{"id":"Yaml","name":"Yaml","value":"1","doc":null,"summary":null},{"id":"Xml","name":"Xml","value":"2","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Blacksmoke16/oq/Oq","kind":"module","full_name":"Oq","name":"Oq"},"doc":"The support formats that can be converted to/from.","summary":"<p>The support formats that can be converted to/from.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"json?-instance-method","html_id":"json?-instance-method","name":"json?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Blacksmoke16/oq/blob/5d7d283407e23e4be8054238a123ed6ceffa6a38/src/oq.cr#L10","def":{"name":"json?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Json"}},{"id":"xml?-instance-method","html_id":"xml?-instance-method","name":"xml?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Blacksmoke16/oq/blob/5d7d283407e23e4be8054238a123ed6ceffa6a38/src/oq.cr#L12","def":{"name":"xml?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Xml"}},{"id":"yaml?-instance-method","html_id":"yaml?-instance-method","name":"yaml?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Blacksmoke16/oq/blob/5d7d283407e23e4be8054238a123ed6ceffa6a38/src/oq.cr#L11","def":{"name":"yaml?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Yaml"}}],"macros":[],"types":[]},{"html_id":"github.com/Blacksmoke16/oq/Oq/Processor","path":"Oq/Processor.html","kind":"struct","full_name":"Oq::Processor","name":"Processor","abstract":false,"superclass":{"html_id":"github.com/Blacksmoke16/oq/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/Blacksmoke16/oq/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/Blacksmoke16/oq/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/Blacksmoke16/oq/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"oq.cr","line_number":15,"url":"https://github.com/Blacksmoke16/oq/blob/5d7d283407e23e4be8054238a123ed6ceffa6a38/src/oq.cr"}],"repository_name":"github.com/Blacksmoke16/oq","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Blacksmoke16/oq/Oq","kind":"module","full_name":"Oq","name":"Oq"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Blacksmoke16/oq/blob/5d7d283407e23e4be8054238a123ed6ceffa6a38/src/oq.cr#L15","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"id":"args:Array(String)-instance-method","html_id":"args:Array(String)-instance-method","name":"args","doc":"The args passed to the program.\n\nNon `oq` args are just passed to `jq`.","summary":"<p>The args passed to the program.</p>","abstract":false,"args":[],"args_string":" : Array(String)","source_link":"https://github.com/Blacksmoke16/oq/blob/5d7d283407e23e4be8054238a123ed6ceffa6a38/src/oq.cr#L27","def":{"name":"args","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(String)","visibility":"Public","body":"@args"}},{"id":"args=(args:Array(String))-instance-method","html_id":"args=(args:Array(String))-instance-method","name":"args=","doc":"The args passed to the program.\n\nNon `oq` args are just passed to `jq`.","summary":"<p>The args passed to the program.</p>","abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Array(String)"}],"args_string":"(args : Array(String))","source_link":"https://github.com/Blacksmoke16/oq/blob/5d7d283407e23e4be8054238a123ed6ceffa6a38/src/oq.cr#L31","def":{"name":"args=","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Array(String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@args = args"}},{"id":"indent:Int32-instance-method","html_id":"indent:Int32-instance-method","name":"indent","doc":"The number of spaces to use for indentation.","summary":"<p>The number of spaces to use for indentation.</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/Blacksmoke16/oq/blob/5d7d283407e23e4be8054238a123ed6ceffa6a38/src/oq.cr#L33","def":{"name":"indent","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@indent"}},{"id":"indent=(indent:Int32)-instance-method","html_id":"indent=(indent:Int32)-instance-method","name":"indent=","doc":"The number of spaces to use for indentation.","summary":"<p>The number of spaces to use for indentation.</p>","abstract":false,"args":[{"name":"indent","doc":null,"default_value":"","external_name":"indent","restriction":"Int32"}],"args_string":"(indent : Int32)","source_link":"https://github.com/Blacksmoke16/oq/blob/5d7d283407e23e4be8054238a123ed6ceffa6a38/src/oq.cr#L37","def":{"name":"indent=","args":[{"name":"indent","doc":null,"default_value":"","external_name":"indent","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@indent = indent"}},{"id":"input_format:Format-instance-method","html_id":"input_format:Format-instance-method","name":"input_format","doc":"The format that the input data is in.","summary":"<p>The format that the input data is in.</p>","abstract":false,"args":[],"args_string":" : Format","source_link":"https://github.com/Blacksmoke16/oq/blob/5d7d283407e23e4be8054238a123ed6ceffa6a38/src/oq.cr#L19","def":{"name":"input_format","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Format","visibility":"Public","body":"@input_format"}},{"id":"input_format=(input_format:Format)-instance-method","html_id":"input_format=(input_format:Format)-instance-method","name":"input_format=","doc":"The format that the input data is in.","summary":"<p>The format that the input data is in.</p>","abstract":false,"args":[{"name":"input_format","doc":null,"default_value":"","external_name":"input_format","restriction":"Format"}],"args_string":"(input_format : Format)","source_link":"https://github.com/Blacksmoke16/oq/blob/5d7d283407e23e4be8054238a123ed6ceffa6a38/src/oq.cr#L23","def":{"name":"input_format=","args":[{"name":"input_format","doc":null,"default_value":"","external_name":"input_format","restriction":"Format"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@input_format = input_format"}},{"id":"output_format:Format-instance-method","html_id":"output_format:Format-instance-method","name":"output_format","doc":"The format that the output should be transcoded into.","summary":"<p>The format that the output should be transcoded into.</p>","abstract":false,"args":[],"args_string":" : Format","source_link":"https://github.com/Blacksmoke16/oq/blob/5d7d283407e23e4be8054238a123ed6ceffa6a38/src/oq.cr#L22","def":{"name":"output_format","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Format","visibility":"Public","body":"@output_format"}},{"id":"output_format=(output_format:Format)-instance-method","html_id":"output_format=(output_format:Format)-instance-method","name":"output_format=","doc":"The format that the output should be transcoded into.","summary":"<p>The format that the output should be transcoded into.</p>","abstract":false,"args":[{"name":"output_format","doc":null,"default_value":"","external_name":"output_format","restriction":"Format"}],"args_string":"(output_format : Format)","source_link":"https://github.com/Blacksmoke16/oq/blob/5d7d283407e23e4be8054238a123ed6ceffa6a38/src/oq.cr#L26","def":{"name":"output_format=","args":[{"name":"output_format","doc":null,"default_value":"","external_name":"output_format","restriction":"Format"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@output_format = output_format"}},{"id":"process-instance-method","html_id":"process-instance-method","name":"process","doc":"Consume the input, convert the input to JSON if needed, pass the input/args to `jq`, then convert the output if needed.","summary":"<p>Consume the input, convert the input to JSON if needed, pass the input/args to <code>jq</code>, then convert the output if needed.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Blacksmoke16/oq/blob/5d7d283407e23e4be8054238a123ed6ceffa6a38/src/oq.cr#L40","def":{"name":"process","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"begin\n  input = IO::Memory.new\n  output = IO::Memory.new\n  error = IO::Memory.new\n  ARGV.replace(ARGV - @args)\n  if ARGV.empty?\n  else\n    @args << ARGV.shift\n  end\n  if !@null_input\n    case @input_format\n    when .json?\n      IO.copy(ARGF, input)\n    when .yaml?\n      ARGV.empty? ? (      input << (YAML.parse(STDIN)).to_json) : (      ARGV.join('\\n', input) do |f, io|\n        io << (YAML.parse(File.open(f))).to_json\n      end)\n    else\n      STDERR.puts(\"Not Implemented\")\n      exit(1)\n    end\n    input.rewind\n  else\n    @args = @args | ARGV\n  end\n  run = parallel(Process.run(\"jq\", args, input: input, output: output, error: error))\n  if run[0].success?\n  else\n    if output.empty? && @null_input\n      puts(\"null\")\n      exit\n    end\n    STDERR.puts(error.to_s)\n    exit(1)\n  end\n  format_output(output)\nrescue ex\n  puts(\"oq error: #{ex.message}\")\n  exit(1)\nend"}},{"id":"xml_root:String-instance-method","html_id":"xml_root:String-instance-method","name":"xml_root","doc":"The root of the XML document when transcoding to XML.","summary":"<p>The root of the XML document when transcoding to XML.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/oq/blob/5d7d283407e23e4be8054238a123ed6ceffa6a38/src/oq.cr#L30","def":{"name":"xml_root","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@xml_root"}},{"id":"xml_root=(xml_root:String)-instance-method","html_id":"xml_root=(xml_root:String)-instance-method","name":"xml_root=","doc":"The root of the XML document when transcoding to XML.","summary":"<p>The root of the XML document when transcoding to XML.</p>","abstract":false,"args":[{"name":"xml_root","doc":null,"default_value":"","external_name":"xml_root","restriction":"String"}],"args_string":"(xml_root : String)","source_link":"https://github.com/Blacksmoke16/oq/blob/5d7d283407e23e4be8054238a123ed6ceffa6a38/src/oq.cr#L34","def":{"name":"xml_root=","args":[{"name":"xml_root","doc":null,"default_value":"","external_name":"xml_root","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@xml_root = xml_root"}}],"macros":[],"types":[]}]},{"html_id":"github.com/Blacksmoke16/oq/Set","path":"Set.html","kind":"struct","full_name":"Set(T)","name":"Set","abstract":false,"superclass":{"html_id":"github.com/Blacksmoke16/oq/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/Blacksmoke16/oq/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"github.com/Blacksmoke16/oq/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/Blacksmoke16/oq/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/Blacksmoke16/oq/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/Blacksmoke16/oq/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"to_xml.cr","line_number":58,"url":"https://github.com/Blacksmoke16/oq/blob/5d7d283407e23e4be8054238a123ed6ceffa6a38/src/to_xml.cr"}],"repository_name":"github.com/Blacksmoke16/oq","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/Blacksmoke16/oq/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/Blacksmoke16/oq/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"`Set` implements a collection of unordered values with no duplicates.\n\nAn `Enumerable` object can be converted to `Set` using the `#to_set` method.\n\n`Set` uses `Hash` as storage, so you must note the following points:\n\n* Equality of elements is determined according to `Object#==` and `Object#hash`.\n* `Set` assumes that the identity of each element does not change while it is stored. Modifying an element of a set will render the set to an unreliable state.\n\n### Example\n\n```\ns1 = Set{1, 2}\ns2 = [1, 2].to_set\ns3 = Set.new [1, 2]\ns1 == s2 # => true\ns1 == s3 # => true\ns1.add(2)\ns1.concat([6, 8])\ns1.subset? s2 # => false\ns2.subset? s1 # => true\n```","summary":"<p><code><a href=\"Set.html\">Set</a></code> implements a collection of unordered values with no duplicates.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"to_xml(builder:XML::Builder,key:String?=nil):Nil-instance-method","html_id":"to_xml(builder:XML::Builder,key:String?=nil):Nil-instance-method","name":"to_xml","doc":null,"summary":null,"abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"XML::Builder"},{"name":"key","doc":null,"default_value":"nil","external_name":"key","restriction":"String | ::Nil"}],"args_string":"(builder : XML::Builder, key : String? = <span class=\"n\">nil</span>) : Nil","source_link":"https://github.com/Blacksmoke16/oq/blob/5d7d283407e23e4be8054238a123ed6ceffa6a38/src/to_xml.cr#L59","def":{"name":"to_xml","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"XML::Builder"},{"name":"key","doc":null,"default_value":"nil","external_name":"key","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"each do |v|\n  builder.element(key || \"item\") do\n    v.to_xml(builder)\n  end\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/Blacksmoke16/oq/Tuple","path":"Tuple.html","kind":"struct","full_name":"Tuple(*T)","name":"Tuple","abstract":false,"superclass":{"html_id":"github.com/Blacksmoke16/oq/Value","kind":"struct","full_name":"Value","name":"Value"},"ancestors":[{"html_id":"github.com/Blacksmoke16/oq/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/Blacksmoke16/oq/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"github.com/Blacksmoke16/oq/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/Blacksmoke16/oq/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"github.com/Blacksmoke16/oq/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/Blacksmoke16/oq/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"to_xml.cr","line_number":68,"url":"https://github.com/Blacksmoke16/oq/blob/5d7d283407e23e4be8054238a123ed6ceffa6a38/src/to_xml.cr"}],"repository_name":"github.com/Blacksmoke16/oq","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/Blacksmoke16/oq/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/Blacksmoke16/oq/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A tuple is a fixed-size, immutable, stack-allocated sequence of values\nof possibly different types.\n\nYou can think of a `Tuple` as an immutable `Array` whose types for each position\nare known at compile time.\n\nA tuple can be created with the usual `new` method or with a tuple literal:\n\n```\ntuple = {1, \"hello\", 'x'} # Tuple(Int32, String, Char)\ntuple[0]                  # => 1\ntuple[1]                  # => \"hello\"\ntuple[2]                  # => 'x'\n```\n\nThe compiler knows what types are in each position, so when indexing\na tuple with an integer literal the compiler will return\nthe value in that index and with the expected type, like in the above\nsnippet. Indexing with an integer literal outside the bounds of the tuple\nwill give a compile-time error.\n\nIndexing with an integer value that is only known at runtime will return\na value whose type is the union of all the types in the tuple, and might raise\n`IndexError`.\n\nTuples are the preferred way to return fixed-size multiple return\nvalues because no memory is needed to be allocated for them:\n\n```\ndef one_and_hello\n  {1, \"hello\"}\nend\n\none, hello = one_and_hello\none   # => 1\nhello # => \"hello\"\n```\n\nGood examples of the above are `Number#divmod` and `Enumerable#minmax`.\n\nTuples can be splat with the `*` operator and passed to methods:\n\n```\ndef multiply(string, value)\n  string * value\nend\n\ntuple = {\"hey\", 2}\nvalue = multiply(*tuple) # same as multiply tuple[0], tuple[1]\nvalue                    # => \"heyhey\"\n```\n\nFinally, when using a splat argument in a method definition its type\nwill be a tuple of the call arguments:\n\n```\ndef splat_test(*args)\n  args\nend\n\ntuple = splat_test 1, \"hello\", 'x'\ntuple.class # => Tuple(Int32, String, Char)\ntuple       # => {1, \"hello\", 'x'}\n```","summary":"<p>A tuple is a fixed-size, immutable, stack-allocated sequence of values of possibly different types.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"to_xml(builder:XML::Builder,key:String?=nil):Nil-instance-method","html_id":"to_xml(builder:XML::Builder,key:String?=nil):Nil-instance-method","name":"to_xml","doc":null,"summary":null,"abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"XML::Builder"},{"name":"key","doc":null,"default_value":"nil","external_name":"key","restriction":"String | ::Nil"}],"args_string":"(builder : XML::Builder, key : String? = <span class=\"n\">nil</span>) : Nil","source_link":"https://github.com/Blacksmoke16/oq/blob/5d7d283407e23e4be8054238a123ed6ceffa6a38/src/to_xml.cr#L69","def":{"name":"to_xml","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"XML::Builder"},{"name":"key","doc":null,"default_value":"nil","external_name":"key","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"{% for i in 0...T.size %}\n      builder.element key || \"item\" do\n        value = self[{{ i }}]\n        case value\n        when Tuple, Array then value.to_xml builder, key\n        else\n          value.to_xml builder\n        end\n      end\n    {% end %}"}}],"macros":[],"types":[]}]}})